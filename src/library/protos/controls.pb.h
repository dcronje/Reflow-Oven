/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_REFLOW_PROTOS_CONTROLS_PB_H_INCLUDED
#define PB_REFLOW_PROTOS_CONTROLS_PB_H_INCLUDED
#include <pb.h>
#include "protos/common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _reflow_InputEvent_InputType {
    reflow_InputEvent_InputType_ENCODER_UP = 0, /* Encoder turned clockwise */
    reflow_InputEvent_InputType_ENCODER_DOWN = 1, /* Encoder turned counter-clockwise */
    reflow_InputEvent_InputType_ENCODER_PRESS = 2, /* Short press of encoder button */
    reflow_InputEvent_InputType_ENCODER_LONG_PRESS = 3, /* Long press of encoder button */
    reflow_InputEvent_InputType_BUTTON_1_PRESS = 4, /* Short press of button 1 */
    reflow_InputEvent_InputType_BUTTON_1_LONG_PRESS = 5, /* Long press of button 1 */
    reflow_InputEvent_InputType_BUTTON_2_PRESS = 6, /* Short press of button 2 */
    reflow_InputEvent_InputType_BUTTON_2_LONG_PRESS = 7, /* Long press of button 2 */
    reflow_InputEvent_InputType_BUTTON_3_PRESS = 8, /* Short press of button 3 */
    reflow_InputEvent_InputType_BUTTON_3_LONG_PRESS = 9, /* Long press of button 3 */
    reflow_InputEvent_InputType_BUTTON_4_PRESS = 10, /* Short press of button 4 */
    reflow_InputEvent_InputType_BUTTON_4_LONG_PRESS = 11 /* Long press of button 4 */
} reflow_InputEvent_InputType;

typedef enum _reflow_ControllerCommand_CommandType {
    reflow_ControllerCommand_CommandType_SET_LED = 0, /* RGB status LED */
    reflow_ControllerCommand_CommandType_BUZZER_BEEP = 1,
    reflow_ControllerCommand_CommandType_RESET = 2,
    reflow_ControllerCommand_CommandType_SLEEP = 3,
    reflow_ControllerCommand_CommandType_WAKE = 4,
    reflow_ControllerCommand_CommandType_SET_LIGHT = 5 /* Main oven light */
} reflow_ControllerCommand_CommandType;

/* Struct definitions */
/* ------------------------------
 Input events from controller
 ------------------------------ */
typedef struct _reflow_InputEvent {
    reflow_InputEvent_InputType type;
    int32_t encoder_steps; /* Number of steps for encoder events (signed) */
} reflow_InputEvent;

/* ------------------------------
 Controller status
 ------------------------------ */
typedef struct _reflow_ControllerStatus {
    bool initialized;
    uint64_t uptime_ms;
    uint32_t free_memory;
    /* LED status */
    bool light_on; /* Whether the main light is on */
    uint32_t light_brightness; /* Current brightness level (0-100) */
} reflow_ControllerStatus;

/* ------------------------------
 Commands to controller
 ------------------------------ */
typedef struct _reflow_ControllerCommand {
    reflow_ControllerCommand_CommandType command;
    /* For SET_LED (RGB status LED) */
    uint32_t led_color; /* RGB color as 0x00RRGGBB */
    uint32_t led_blink_pattern; /* 0 = solid, otherwise bit pattern */
    /* For BUZZER_BEEP */
    uint32_t buzzer_frequency; /* In Hz */
    uint32_t buzzer_duration; /* In ms */
    uint32_t buzzer_pattern; /* Bit pattern for multiple beeps */
    /* For SLEEP */
    uint32_t sleep_duration; /* In ms, 0 = indefinite */
    /* For SET_LIGHT (Main oven light) */
    bool light_on; /* On/off state */
    uint32_t light_brightness; /* Brightness level (0-100) */
} reflow_ControllerCommand;

/* ------------------------------
 Combined controls message
 ------------------------------ */
typedef struct _reflow_ControlsMessage {
    bool has_base;
    reflow_BaseMessage base;
    pb_size_t which_payload;
    union {
        reflow_InputEvent input_event;
        reflow_ControllerStatus status;
        reflow_ControllerCommand command;
        reflow_CommandResponse response;
    } payload;
} reflow_ControlsMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _reflow_InputEvent_InputType_MIN reflow_InputEvent_InputType_ENCODER_UP
#define _reflow_InputEvent_InputType_MAX reflow_InputEvent_InputType_BUTTON_4_LONG_PRESS
#define _reflow_InputEvent_InputType_ARRAYSIZE ((reflow_InputEvent_InputType)(reflow_InputEvent_InputType_BUTTON_4_LONG_PRESS+1))

#define _reflow_ControllerCommand_CommandType_MIN reflow_ControllerCommand_CommandType_SET_LED
#define _reflow_ControllerCommand_CommandType_MAX reflow_ControllerCommand_CommandType_SET_LIGHT
#define _reflow_ControllerCommand_CommandType_ARRAYSIZE ((reflow_ControllerCommand_CommandType)(reflow_ControllerCommand_CommandType_SET_LIGHT+1))

#define reflow_InputEvent_type_ENUMTYPE reflow_InputEvent_InputType


#define reflow_ControllerCommand_command_ENUMTYPE reflow_ControllerCommand_CommandType



/* Initializer values for message structs */
#define reflow_InputEvent_init_default           {_reflow_InputEvent_InputType_MIN, 0}
#define reflow_ControllerStatus_init_default     {0, 0, 0, 0, 0}
#define reflow_ControllerCommand_init_default    {_reflow_ControllerCommand_CommandType_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define reflow_ControlsMessage_init_default      {false, reflow_BaseMessage_init_default, 0, {reflow_InputEvent_init_default}}
#define reflow_InputEvent_init_zero              {_reflow_InputEvent_InputType_MIN, 0}
#define reflow_ControllerStatus_init_zero        {0, 0, 0, 0, 0}
#define reflow_ControllerCommand_init_zero       {_reflow_ControllerCommand_CommandType_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define reflow_ControlsMessage_init_zero         {false, reflow_BaseMessage_init_zero, 0, {reflow_InputEvent_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define reflow_InputEvent_type_tag               1
#define reflow_InputEvent_encoder_steps_tag      2
#define reflow_ControllerStatus_initialized_tag  1
#define reflow_ControllerStatus_uptime_ms_tag    2
#define reflow_ControllerStatus_free_memory_tag  3
#define reflow_ControllerStatus_light_on_tag     4
#define reflow_ControllerStatus_light_brightness_tag 5
#define reflow_ControllerCommand_command_tag     1
#define reflow_ControllerCommand_led_color_tag   2
#define reflow_ControllerCommand_led_blink_pattern_tag 3
#define reflow_ControllerCommand_buzzer_frequency_tag 4
#define reflow_ControllerCommand_buzzer_duration_tag 5
#define reflow_ControllerCommand_buzzer_pattern_tag 6
#define reflow_ControllerCommand_sleep_duration_tag 7
#define reflow_ControllerCommand_light_on_tag    8
#define reflow_ControllerCommand_light_brightness_tag 9
#define reflow_ControlsMessage_base_tag          1
#define reflow_ControlsMessage_input_event_tag   2
#define reflow_ControlsMessage_status_tag        3
#define reflow_ControlsMessage_command_tag       4
#define reflow_ControlsMessage_response_tag      5

/* Struct field encoding specification for nanopb */
#define reflow_InputEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, INT32,    encoder_steps,     2)
#define reflow_InputEvent_CALLBACK NULL
#define reflow_InputEvent_DEFAULT NULL

#define reflow_ControllerStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     initialized,       1) \
X(a, STATIC,   SINGULAR, UINT64,   uptime_ms,         2) \
X(a, STATIC,   SINGULAR, UINT32,   free_memory,       3) \
X(a, STATIC,   SINGULAR, BOOL,     light_on,          4) \
X(a, STATIC,   SINGULAR, UINT32,   light_brightness,   5)
#define reflow_ControllerStatus_CALLBACK NULL
#define reflow_ControllerStatus_DEFAULT NULL

#define reflow_ControllerCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command,           1) \
X(a, STATIC,   SINGULAR, UINT32,   led_color,         2) \
X(a, STATIC,   SINGULAR, UINT32,   led_blink_pattern,   3) \
X(a, STATIC,   SINGULAR, UINT32,   buzzer_frequency,   4) \
X(a, STATIC,   SINGULAR, UINT32,   buzzer_duration,   5) \
X(a, STATIC,   SINGULAR, UINT32,   buzzer_pattern,    6) \
X(a, STATIC,   SINGULAR, UINT32,   sleep_duration,    7) \
X(a, STATIC,   SINGULAR, BOOL,     light_on,          8) \
X(a, STATIC,   SINGULAR, UINT32,   light_brightness,   9)
#define reflow_ControllerCommand_CALLBACK NULL
#define reflow_ControllerCommand_DEFAULT NULL

#define reflow_ControlsMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  base,              1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,input_event,payload.input_event),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,status,payload.status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,command,payload.command),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,response,payload.response),   5)
#define reflow_ControlsMessage_CALLBACK NULL
#define reflow_ControlsMessage_DEFAULT NULL
#define reflow_ControlsMessage_base_MSGTYPE reflow_BaseMessage
#define reflow_ControlsMessage_payload_input_event_MSGTYPE reflow_InputEvent
#define reflow_ControlsMessage_payload_status_MSGTYPE reflow_ControllerStatus
#define reflow_ControlsMessage_payload_command_MSGTYPE reflow_ControllerCommand
#define reflow_ControlsMessage_payload_response_MSGTYPE reflow_CommandResponse

extern const pb_msgdesc_t reflow_InputEvent_msg;
extern const pb_msgdesc_t reflow_ControllerStatus_msg;
extern const pb_msgdesc_t reflow_ControllerCommand_msg;
extern const pb_msgdesc_t reflow_ControlsMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define reflow_InputEvent_fields &reflow_InputEvent_msg
#define reflow_ControllerStatus_fields &reflow_ControllerStatus_msg
#define reflow_ControllerCommand_fields &reflow_ControllerCommand_msg
#define reflow_ControlsMessage_fields &reflow_ControlsMessage_msg

/* Maximum encoded size of messages (where known) */
#if defined(reflow_CommandResponse_size)
union reflow_ControlsMessage_payload_size_union {char f5[(6 + reflow_CommandResponse_size)]; char f0[48];};
#endif
#define REFLOW_PROTOS_CONTROLS_PB_H_MAX_SIZE     reflow_ControllerCommand_size
#define reflow_ControllerCommand_size            46
#define reflow_ControllerStatus_size             27
#define reflow_InputEvent_size                   13
#if defined(reflow_CommandResponse_size)
#define reflow_ControlsMessage_size              (27 + sizeof(union reflow_ControlsMessage_payload_size_union))
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
